basic binary search implementation
항상 Binary Search로 얻고 싶은게 뭔지부터 파악하는게 중요함
단순히 target이 존재하기만 하면되는것인지, leftmost index를 찾고 싶은것인지, rightmost index, 혹은 target 이후 의 값인지 등등 



import bisect

Bisect(array, target, low, high) //search the index of rightmost insertion point 

Bisect_left(array, target, low, high) // search the index of leftmost insertion point


l = 0
h = n-1

    while l <= h:
        m = (l+h)//2

        if median == ar[m]:
            if ar[m] == ar[m+1]: //this additional line gives you Bisect_right operation 
                l = m+1
            else:
                break
        elif median < ar[m]:
            h = m-1
        else:
            l = m+1



Modified version 




이런식의 modified version이 있음. 
CodeForce Maximum Median 문제 
총 k의 범위에서 possible candidates들을 모두 binary search를 통해서 값을 찾는경우 
특이점은 usual 하게 h = mid-1 && l = mid+1 가 아닌 
mid = l, while != h, mid = (l+h+1)//2 이렇게 두었음. 

    while l != h:
        mid = (l+h+1)//2

        if check(mid,k,n) is False:
            h = mid -1
        else:
            l = mid






